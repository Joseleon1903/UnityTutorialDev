Open Closed Principle

“Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.”

By employing that principle, the goal is to extend a module’s behavior without modifying its source code.

Meyer's open/closed principle
Bertrand Meyer is generally credited for having originated the term open/closed principle, which appeared in his 1988 book Object Oriented Software Construction.

A module will be said to be open if it is still available for extension. 
For example, it should be possible to add fields to the data structures it contains, or new elements to the set of functions it performs.
A module will be said to be closed if [it] is available for use by other modules. 
This assumes that the module has been given a well-defined, stable description (the interface in the sense of information hiding).
At the time Meyer was writing, adding fields or functions to a library inevitably required changes to any programs depending on that library.
Meyer's proposed solution to this dilemma relied on the notion of object-oriented inheritance (specifically implementation inheritance):

A class is closed, since it may be compiled, stored in a library, baselined, and used by client classes. 
But it is also open, since any new class may use it as parent, adding new features. When a descendant class
is defined, there is no need to change the original or to disturb its clients.

* the TargettingSystemScript is the bad way of contruction of a class
* the TargettingSystemGood is the corret way to do the same by using an interface for any functionaly, thas is easy to expand but close to modify