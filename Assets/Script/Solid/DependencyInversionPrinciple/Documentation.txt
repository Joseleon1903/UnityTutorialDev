Design Patterns - Dependency Inversion Principle

In object-oriented design, the dependency inversion principle is a specific form of decoupling software modules. When following this principle,
the conventional dependency relationships established from high-level, policy-setting modules to low-level, dependency modules are reversed, 
thus rendering high-level modules independent of the low-level module implementation details.
The principle states:

   * High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces).
   * Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.

The general idea of this principle is as simple as it is important: High-level modules, which provide complex logic,
should be easily reusable and unaffected by changes in low-level modules, which provide utility features.
To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from each other.

* In the example with have the IMovementImputGetter who is the interface en the high level of abtraction, the KeyboardMovement and ConstantMovement are two
  different implementation where the MoverGood is the correct way of implement.